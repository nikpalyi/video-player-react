{"version":3,"sources":["Video.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["Video","src","this","props","controls","autostart","autoPlay","muted","React","Component","Menu","handleClick","bind","e","text","target","value","chooseVideo","onClick","type","name","VIDEOS","fast","slow","cute","eek","App","state","newVideo","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAEaA,EAAb,iLAEI,OACE,6BACE,2BAAOC,IAAKC,KAAKC,MAAMF,IAAKG,UAAQ,EAACC,WAAS,EAACC,UAAQ,EAACC,OAAK,SAJrE,GAA2BC,IAAMC,WCApBC,EAAb,YACE,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,EADrB,yEAMcC,GACV,IAAIC,EAAOD,EAAEE,OAAOC,MACpBd,KAAKC,MAAMc,YAAYH,KAR3B,+BAYI,OACE,0BAAMI,QAAShB,KAAKS,aAClB,2BAAOQ,KAAK,QAAQC,KAAK,MAAMJ,MAAM,SADvC,QAEE,2BAAOG,KAAK,QAAQC,KAAK,MAAMJ,MAAM,SAFvC,QAGE,2BAAOG,KAAK,QAAQC,KAAK,MAAMJ,MAAM,SAHvC,QAIE,2BAAOG,KAAK,QAAQC,KAAK,MAAMJ,MAAM,QAJvC,YAbN,GAA0BR,IAAMC,WCG1BY,EAAS,CACbC,KACE,iFACFC,KACE,iFACFC,KACE,iFACFC,IACE,iFA4BWC,E,YAxBb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDwB,MAAQ,CAAE1B,IAAKoB,EAAOC,MAC3B,EAAKL,YAAc,EAAKA,YAAYL,KAAjB,gBAJF,E,yEAOPgB,GACV1B,KAAK2B,SAAS,CACZ5B,IAAKoB,EAAOO,O,+BAKd,OACE,6BACE,4CACA,kBAAC,EAAD,CAAMX,YAAaf,KAAKe,cACxB,kBAAC,EAAD,CAAOhB,IAAKC,KAAKyB,MAAM1B,W,GAnBbO,IAAMC,WCJJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6d2bb907.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Video extends React.Component {\n  render() {\n    return (\n      <div>\n        <video src={this.props.src} controls autostart autoPlay muted />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport class Menu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    var text = e.target.value;\n    this.props.chooseVideo(text);\n  }\n\n  render() {\n    return (\n      <form onClick={this.handleClick}>\n        <input type='radio' name='src' value='fast' /> fast\n        <input type='radio' name='src' value='slow' /> slow\n        <input type='radio' name='src' value='cute' /> cute\n        <input type='radio' name='src' value='eek' /> eek\n      </form>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Video } from './Video';\nimport { Menu } from './Menu';\n\nconst VIDEOS = {\n  fast:\n    'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-fast.mp4',\n  slow:\n    'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-slow.mp4',\n  cute:\n    'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-cute.mp4',\n  eek:\n    'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-eek.mp4'\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { src: VIDEOS.fast };\n    this.chooseVideo = this.chooseVideo.bind(this);\n  }\n\n  chooseVideo(newVideo) {\n    this.setState({\n      src: VIDEOS[newVideo]\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Video Player</h1>\n        <Menu chooseVideo={this.chooseVideo} />\n        <Video src={this.state.src} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}